plugins {
    id 'war'
    id 'com.benjaminsproule.swagger' version '1.0.0'
}

repositories {
    mavenCentral() 
}

dependencies {
    compile('javax:javaee-web-api:8.0')
    compile('org.arquillian.universe:arquillian-junit:1.2.0.1')
    compile('io.swagger:swagger-annotations:1.5.21')
    compile('org.hibernate:hibernate-core:5.3.7.Final')

    testCompile('junit:junit:4.12')
    testCompile('org.arquillian.universe:arquillian-junit:*')
    testCompile('org.jboss.arquillian.extension:arquillian-rest-client-api:1.0.0.Alpha4')
    testCompile('org.jboss.arquillian.extension:arquillian-rest-client-impl-3x:1.0.0.Alpha4')
    testCompile('org.jboss.shrinkwrap:shrinkwrap-api:1.2.6')
    testCompile('org.wildfly.arquillian:wildfly-arquillian-container-remote:2.1.1.Final')
}

configurations {
    deployLib {
        setTransitive(false)
    }
    noDeployLib {
        setTransitive(false)
    }
    compile {
        setExtendsFrom([deployLib, noDeployLib])
    }
}

this.setGroup('de.arcadius')
this.setDescription('my first webb application')
this.setVersion(war_version)
this.defaultTasks('myWar')

swagger {
    apiSource {
        springmvc = false
        locations = ['de.arcadius.firstApp.rest']
        schemes = ['http', 'https']
        host = 'localhost:8080'
        basePath = '/api'
        outputFormats = ['json', 'yaml']
        info {
            title = "need some swag ?"
            version = "1.0.0"
            license {
                name = 'Apache 2.0'
            }
        }
        securityDefinition {
            name = 'basicAuth'
            type = 'basic'
        }
        outputPath = "src/main/webapp/document.html"
        swaggerDirectory = "src/main/webapp"
        attachSwaggerArtifact = true
    }
}

sourceSets {
    main {
        java {
            setSrcDirs(['src/main/java'])
            setWebAppDirName('src/main/webapp')
            setOutputDir(file('out/classes'))
        }
        resources {
            setSrcDirs(['src/main/resources'])
            output.resourcesDir = file('out/resources')
        }
    }
    test {
        java {
            setSrcDirs(['src/test/java'])
            setOutputDir(file('out/test/classes'))
        }
        resources {
            setSrcDirs(['src/test/resources'])
            output.resourcesDir = file('out/test/resources')
        }
    }
}

test {
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat = 'full'
    }
}


task myWar(type: War) {
    setClasspath(getConfigurations().getByName('deployLib'))
    setDestinationDir(file('out/artifact'))
    setArchivesBaseName(war_name)
    webInf {
        into('classes') {
            from sourceSets.main.java.outputDir
            into('META-INF') {
                from(sourceSets.main.resources.files) {
                    include("persistence.xml")
                }

            }
        }
    }
    metaInf {
        from(sourceSets.main.resources) {
            include("import.sql")
        }
        manifest {
            attributes 'version': war_version
            attributes 'description': war_description
            attributes 'creator': war_creator
            attributes 'classifire': war_classifire
            attributes 'Class-Path': configurations.deployLib.files.collect { it.name }.join(' ')
        }
    }
}



task list() {
    doLast {
        println "classpath = ${sourceSets.main.resources.files.collect { File file -> file.name }}"
    }
}

task list2() {
    doLast {
        println "classpath = ${sourceSets.main.output.asFileTree.collect { File file -> file.name }}"
    }
}

